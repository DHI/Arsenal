{
  "title": "react-app",
  "steps": [
    {
      "file": "react-app/client/index.tsx",
      "line": 5,
      "description": "The entry point to the single page react app.\n\n",
      "selection": {
        "start": {
          "line": 6,
          "character": 15
        },
        "end": {
          "line": 6,
          "character": 37
        }
      }
    },
    {
      "file": "react-app/client/root/root.tsx",
      "line": 14,
      "description": "Create the global Mobx State Tree store and pass it into our Root component."
    },
    {
      "file": "react-app/client/root/root.tsx",
      "line": 27,
      "description": "The Root component is where we define react context providers so our app can access everything, including the `useStore()` hook."
    },
    {
      "file": "react-app/client/store.ts",
      "line": 17,
      "description": "Here we create the RootModel store, and apply logging middleware for development, then sync our browser URL history with the store router."
    },
    {
      "file": "react-app/client/store.ts",
      "line": 45,
      "description": "The `useStore` hook can be used in the project like so:\n\n```tsx\nconst MyComponent = observer(() => {\n  const { example } = useStore()\n  return <>{example.value}</>\n})\n```"
    },
    {
      "file": "react-app/client/root/root.models.ts",
      "line": 7,
      "description": "This is the RootModel which is... at the root. You can use this within Mobx State Tree like so to walk back up the tree and access any other model instances.\n\n```ts\nconst root = getParentOfType(self, RootModel)\nroot.router // ...\n```"
    },
    {
      "file": "react-app/client/example/example.tsx",
      "line": 8,
      "description": "Here the Example component is wrapped in `observer()` which allows this component to be re-rendered whenever any MobX value within it gets modified inside the model."
    }
  ]
}